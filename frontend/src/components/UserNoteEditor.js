import React, { useState, useEffect, useRef } from 'react';
import { Tabs, Button, Tooltip, Spin, message } from 'antd';
import { EditOutlined, EyeOutlined, FileTextOutlined, RobotOutlined } from '@ant-design/icons';
import MarkdownMathRenderer from './MarkdownMathRenderer';
import './AnimatedDiffView.css';

const { TabPane } = Tabs;

const UserNoteEditor = ({ 
  aiContent = '', 
  content = '', 
  onSave,
  loading = false,
  editorTitle = 'Áî®Êà∑Á¨îËÆ∞',
  color = '#1890ff',
  onAIImprove = null,
  showGenerateButton = false,
  onGenerate = null
}) => {
  console.log('üîç UserNoteEditorÊ∏≤Êüì - Êî∂Âà∞props:', { 
    contentLength: content?.length || 0,
    contentPreview: content ? content.substring(0, 50) + '...' : 'Êó†ÂÜÖÂÆπ',
    loading,
    showGenerateButton,
    timestamp: new Date().toLocaleTimeString()
  });
  
  // ÁÆÄÂåñÁä∂ÊÄÅÁÆ°ÁêÜ - Âè™Áª¥Êä§ÂøÖË¶ÅÁöÑÁä∂ÊÄÅ
  const [localContent, setLocalContent] = useState(content || '');
  const [editMode, setEditMode] = useState(!content);
  const [activeTab, setActiveTab] = useState(content ? 'user' : 'ai');
  const [isImproving, setIsImproving] = useState(false);
  const [autoSaveVisible, setAutoSaveVisible] = useState(false);
  
  // refs
  const autoSaveTimerRef = useRef(null);
  const lastContentRef = useRef(content);
  
  // ÁõëÂê¨Â§ñÈÉ®contentÂèòÂåñÔºåÁõ¥Êé•ÂêåÊ≠•Âà∞Êú¨Âú∞Áä∂ÊÄÅ
  useEffect(() => {
    console.log('üì° UserNoteEditor - content propsÂèòÂåñÊ£ÄÊµã:', {
      newContent: content ? content.substring(0, 50) + '...' : 'Êó†ÂÜÖÂÆπ',
      oldContent: lastContentRef.current ? lastContentRef.current.substring(0, 50) + '...' : 'Êó†ÂÜÖÂÆπ',
      hasChanged: content !== lastContentRef.current,
      newLength: content?.length || 0,
      oldLength: lastContentRef.current?.length || 0
    });
    
    // Â¶ÇÊûúÂ§ñÈÉ®contentÂèëÁîü‰∫ÜÂÆûË¥®ÊÄßÂèòÂåñÔºåÁ´ãÂç≥ÂêåÊ≠•Âà∞Êú¨Âú∞Áä∂ÊÄÅ
    if (content !== lastContentRef.current) {
      console.log('‚úÖ UserNoteEditor - ÂêåÊ≠•Â§ñÈÉ®contentÂà∞Êú¨Âú∞Áä∂ÊÄÅ');
      setLocalContent(content || '');
      lastContentRef.current = content;
      
      // Â¶ÇÊûúÊúâÂÜÖÂÆπ‰∏îÂΩìÂâçÂú®AIÊ†áÁ≠æÈ°µÔºåÂàáÊç¢Âà∞Áî®Êà∑Ê†áÁ≠æÈ°µ
      if (content && activeTab === 'ai') {
        setActiveTab('user');
      }
    }
  }, [content, activeTab]);
  
  // Ëá™Âä®‰øùÂ≠òÈÄªËæë
  useEffect(() => {
    if (autoSaveTimerRef.current) {
      clearTimeout(autoSaveTimerRef.current);
    }
    
    // Âè™ÊúâÂú®ÁºñËæëÊ®°Âºè‰∏îÂÜÖÂÆπ‰∏éÂ§ñÈÉ®props‰∏çÂêåÊó∂ÊâçËá™Âä®‰øùÂ≠ò
    if (editMode && localContent !== content && onSave) {
      autoSaveTimerRef.current = setTimeout(() => {
        console.log('üíæ UserNoteEditor - Ëá™Âä®‰øùÂ≠òÂÜÖÂÆπÂà∞Áà∂ÁªÑ‰ª∂');
        onSave(localContent);
        setAutoSaveVisible(true);
        setTimeout(() => setAutoSaveVisible(false), 2000);
      }, 2000);
    }
    
    return () => {
      if (autoSaveTimerRef.current) {
        clearTimeout(autoSaveTimerRef.current);
      }
    };
  }, [localContent, content, editMode, onSave]);
  
  // ÂàáÊç¢ÁºñËæëÊ®°Âºè
  const toggleEditMode = () => {
    console.log('üîÄ UserNoteEditor - ÂàáÊç¢ÁºñËæëÊ®°Âºè:', !editMode);
    if (editMode && onSave && localContent !== content) {
      console.log('üíæ UserNoteEditor - ‰øùÂ≠òÂÜÖÂÆπÂπ∂ÂàáÊç¢Âà∞È¢ÑËßàÊ®°Âºè');
      onSave(localContent);
    }
    setEditMode(!editMode);
    if (!editMode) {
      setActiveTab('user');
    }
  };
  
  // Â§ÑÁêÜÊñáÊú¨Âå∫ÂüüÂÜÖÂÆπÂèòÂåñ
  const handleContentChange = (e) => {
    const newValue = e.target.value;
    console.log('üìù UserNoteEditor - ÊñáÊú¨ÂÜÖÂÆπÂèòÂåñ:', newValue.length, 'Â≠óÁ¨¶');
    setLocalContent(newValue);
  };
  
  // ÂêàÂπ∂AIÂÜÖÂÆπ
  const mergeAiContent = () => {
    console.log('üîÑ UserNoteEditor - ÂêàÂπ∂AIÂÜÖÂÆπ');
    const mergedContent = localContent ? `${localContent}\n\n--- AIÂÜÖÂÆπ ---\n${aiContent}` : aiContent;
    setLocalContent(mergedContent);
    setActiveTab('user');
    setEditMode(true);
    if (onSave) {
      onSave(mergedContent);
    }
  };
  
  // AIÊîπËøõÁ¨îËÆ∞
  const handleAIImprove = async () => {
    console.log('üöÄ UserNoteEditor - ÂºÄÂßãAIÊîπËøõ');
    if (!onAIImprove) return;
    
    setIsImproving(true);
    
    try {
      console.log('üì§ UserNoteEditor - ÂèëÈÄÅÂÜÖÂÆπÈïøÂ∫¶:', localContent?.length || 0);
      
      // Ë∞ÉÁî®Áà∂ÁªÑ‰ª∂ÁöÑÊîπËøõÂáΩÊï∞
      const improvedContent = await onAIImprove(localContent);
      
      console.log('üì• UserNoteEditor - Êî∂Âà∞ÊîπËøõÂÜÖÂÆπ:', {
        length: improvedContent?.length || 0,
        preview: improvedContent ? improvedContent.substring(0, 100) + '...' : 'Êó†ÂÜÖÂÆπ'
      });
      
      if (improvedContent && improvedContent.trim().length > 0) {
        console.log('‚úÖ UserNoteEditor - Áõ¥Êé•Â∫îÁî®ÊîπËøõÂÜÖÂÆπ');
        
        // Áõ¥Êé•Êõ¥Êñ∞Êú¨Âú∞Áä∂ÊÄÅ
        setLocalContent(improvedContent);
        setEditMode(true);
        setActiveTab('user');
        
        // Á´ãÂç≥‰øùÂ≠òÂà∞Áà∂ÁªÑ‰ª∂
        if (onSave) {
          console.log('üíæ UserNoteEditor - Á´ãÂç≥‰øùÂ≠òÊîπËøõÂÜÖÂÆπ');
          onSave(improvedContent);
        }
        
        message.success('Á¨îËÆ∞Â∑≤ÊàêÂäüÊîπËøõÔºÅ');
      } else {
        console.warn('‚ö†Ô∏è UserNoteEditor - ÊîπËøõÂÜÖÂÆπ‰∏∫Á©∫ÊàñÊó†Êïà');
        message.warning('ÊîπËøõÂÜÖÂÆπ‰∏∫Á©∫ÔºåËØ∑ÈáçËØï');
      }
    } catch (error) {
      console.error('‚ùå UserNoteEditor - AIÊîπËøõÂ§±Ë¥•:', error);
      message.error('Á¨îËÆ∞ÊîπËøõÂ§±Ë¥•ÔºåËØ∑ÈáçËØï');
    } finally {
      setIsImproving(false);
    }
  };
  
  // ÁªÑ‰ª∂Âç∏ËΩΩÊ∏ÖÁêÜ
  useEffect(() => {
    return () => {
      if (autoSaveTimerRef.current) {
        clearTimeout(autoSaveTimerRef.current);
      }
    };
  }, []);
  
  return (
    <div className="user-note-editor">
      <div className="editor-toolbar" style={{ borderColor: color }}>
        <div className="editor-toolbar-left">
          <span style={{ fontWeight: 'bold', color }}>{editorTitle}</span>
          {process.env.NODE_ENV !== 'production' && (
            <span style={{ marginLeft: '10px', fontSize: '12px', color: '#999' }}>
              ÈïøÂ∫¶: {localContent?.length || 0} | {new Date().toLocaleTimeString()}
            </span>
          )}
        </div>
        <div className="editor-toolbar-right">
          {activeTab === 'user' && (
            <>
              {editMode ? (
                <>
                  {onAIImprove && (
                    <Tooltip title="AIÂÆåÂñÑÁ¨îËÆ∞">
                      <Button 
                        type="text" 
                        icon={<RobotOutlined />} 
                        onClick={handleAIImprove}
                        disabled={loading || isImproving}
                        loading={isImproving}
                      />
                    </Tooltip>
                  )}
                  {showGenerateButton && onGenerate && (
                    <Tooltip title="AIÁîüÊàêÁ¨îËÆ∞">
                      <Button 
                        type="text" 
                        icon={<FileTextOutlined />} 
                        onClick={onGenerate}
                        disabled={loading || isImproving}
                        style={{ color: color }}
                      />
                    </Tooltip>
                  )}
                  <Tooltip title="È¢ÑËßàÊ®°Âºè">
                    <Button 
                      type="text" 
                      icon={<EyeOutlined />} 
                      onClick={toggleEditMode}
                      disabled={loading || isImproving}
                    />
                  </Tooltip>
                </>
              ) : (
                <>
                  {showGenerateButton && onGenerate && !localContent && (
                    <Tooltip title="AIÁîüÊàêÁ¨îËÆ∞">
                      <Button 
                        type="text" 
                        icon={<FileTextOutlined />} 
                        onClick={onGenerate}
                        disabled={loading || isImproving}
                        style={{ color: color }}
                      />
                    </Tooltip>
                  )}
                  <Tooltip title="ÁºñËæë">
                    <Button 
                      type="text" 
                      icon={<EditOutlined />} 
                      onClick={toggleEditMode}
                      disabled={loading || isImproving}
                    />
                  </Tooltip>
                </>
              )}
            </>
          )}
          {aiContent && activeTab === 'ai' && (
            <Tooltip title="ÂêàÂπ∂Âà∞ÊàëÁöÑÁ¨îËÆ∞">
              <Button 
                type="text" 
                icon={<FileTextOutlined />} 
                onClick={mergeAiContent}
                disabled={loading || isImproving}
              />
            </Tooltip>
          )}
        </div>
      </div>
      
      <Tabs 
        activeKey={activeTab} 
        onChange={setActiveTab}
        size="small"
        tabBarStyle={{ margin: '0 16px' }}
        className="note-tabs"
      >
        <TabPane 
          tab={<span><FileTextOutlined /> ÊàëÁöÑÁ¨îËÆ∞</span>} 
          key="user"
        >
          <div className="tabs-content" style={{ position: 'relative' }}>
            {/* Âä†ËΩΩÈÅÆÁΩ© */}
            {(loading || isImproving) && (
              <div style={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                background: 'rgba(255, 255, 255, 0.8)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                zIndex: 1000
              }}>
                <Spin size="large" tip={isImproving ? "AIÊ≠£Âú®ÊîπËøõÁ¨îËÆ∞..." : "Â§ÑÁêÜ‰∏≠..."} />
              </div>
            )}
            
            {editMode ? (
              <div className="note-editor-container" style={{ position: 'relative' }}>
                <textarea
                  className="note-editor"
                  value={localContent}
                  onChange={handleContentChange}
                  placeholder="Âú®ËøôÈáåËÆ∞ÂΩï‰Ω†ÁöÑÁ¨îËÆ∞..."
                  disabled={loading || isImproving}
                  style={{ 
                    width: '100%', 
                    height: '300px', 
                    border: '1px solid #d9d9d9',
                    borderRadius: '4px',
                    padding: '8px',
                    resize: 'vertical'
                  }}
                />
                {autoSaveVisible && (
                  <div style={{
                    position: 'absolute',
                    bottom: '10px',
                    right: '10px',
                    background: '#52c41a',
                    color: 'white',
                    padding: '4px 8px',
                    borderRadius: '4px',
                    fontSize: '12px'
                  }}>
                    Â∑≤Ëá™Âä®‰øùÂ≠ò
                  </div>
                )}
              </div>
            ) : (
              <div className="preview-display" style={{ 
                padding: '16px', 
                overflow: 'auto', 
                maxHeight: '300px',
                border: '1px solid #d9d9d9',
                borderRadius: '4px',
                background: '#fafafa'
              }}>
                <MarkdownMathRenderer>
                  {localContent || 'ÊöÇÊó†Á¨îËÆ∞ÂÜÖÂÆπ'}
                </MarkdownMathRenderer>
              </div>
            )}
          </div>
        </TabPane>
        
        {aiContent && (
          <TabPane 
            tab={<span><RobotOutlined /> AIÂÜÖÂÆπ</span>} 
            key="ai"
          >
            <div className="tabs-content">
              <div style={{ 
                padding: '16px', 
                overflow: 'auto', 
                maxHeight: '300px',
                border: '1px solid #d9d9d9',
                borderRadius: '4px',
                background: '#f6ffed'
              }}>
                <MarkdownMathRenderer>
                  {aiContent || 'ÊöÇÊó†AIÂÜÖÂÆπ'}
                </MarkdownMathRenderer>
              </div>
            </div>
          </TabPane>
        )}
      </Tabs>
    </div>
  );
};

export default UserNoteEditor; 